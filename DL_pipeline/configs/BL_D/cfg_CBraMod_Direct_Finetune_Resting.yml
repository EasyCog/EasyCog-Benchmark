sliced_data_folder_all: /root/EasyCog/data/data_v0428/resting_3min_feat_train/asreog_filter_order3_all_data
sliced_trials_json_all: /root/EasyCog/data_json_files/proc_compare_json//converted_resting_3min_asreog_filter_order3_all_data_0426.json


dataloader: EasyCog_Dataloader

cog_task: 'resting' # 'video' or 'resting' or 'all'

input_type_list:
- EEG


input_format_dict:
  EEG:
  - sequence


gt_type_list:
- MoCA
- MMSE

gt_format_dict:
  MoCA:
  - value
  MMSE:
  - value

norm_params:
  EEG:
    sequence:
      max_value: 8087.9805
      mean_value: -0.0003434395
      min_value: -7018.4287
      norm_type: norm_by_subject_task
      std_value: 20.800686
  MMSE:
    value:
      max_value: 30.0
      mean_value: 23.033305227655987
      min_value: 0.0
      norm_type: norm_by_min_max
      std_value: 5.717059718000392
  MoCA:
    value:
      max_value: 30.0
      mean_value: 17.8941496951615
      min_value: 0.0
      norm_type: norm_by_min_max
      std_value: 6.793486787029787
  DTF:
    value:
      max_value: ~
      mean_value: ~
      min_value: ~
      norm_type: no_norm ### TODO
      std_value: ~

data_aug_methods:
  train:
    train:
    EEG:
      pink_noise:
        aug_times: 1
        amplitude: 0.3
    MoCA:
      no_aug:
        aug_times: 1
    MMSE:
      no_aug:
        aug_times: 1
    DTF:
      no_aug:
        aug_times: 1
    
  test:
    EEG:
      no_aug:
        aug_times: 1
    MoCA:
      no_aug:
        aug_times: 1
    MMSE:
      no_aug:
        aug_times: 1
    DTF:
      no_aug:
        aug_times: 1

num_workers: 2
persistent_workers: True
prefetch_factor: 2

model:
  name: CBraMod_Direct_Finetune
  input_channels: 16
  n_layer: 12
  n_dim: 200
  backbone_weight_path: from utils.mask_pretrain_models.py
  load_pretrained_backbone: True
  freeze_backbone: False
  input_len: 180
  pretrained: ~



Loss:
  name: reg_L1_Loss
  params:
    alpha: 1

Test_Loss:
  name: reg_L1_Loss
  params:
    alpha: 1

seed: 43
cpu: ~
cpu_affinity: ~
gpu: 1

batch_size: 4
lr_init: 0.001
warmup_epochs: 20
epochs: 200
scheduler: cosine
optimizer: Adam


cross_validation: 5-folder
train: True
evaluate: ~
resume: ~

DA:
  if_use: False
  Adapt_Data_Ratio: 1
  methods: ~


save_path: /home/mmWave_group/EasyCog/checkpoints_Baselines   #/data/mmWave_group/EasyCog/models/checkpoints_Baselines
train_subject: ~
valid_subject: ~
test_subject: ~

is_split_trials_json_dict: True
logger_file: ~

record: record.txt
save_epoch: 10


### This is for single-task classification
classes: 10
task: regression
train_stage: cog_regression

### This is for multi-task classification and regression
### If there is multi-task, please use this. The above single-task classification will be ignored.
### classificaton-10, classification-{num_classes} | regression-{num_dims}
### The first item is for classification, the second is for MoCA regression, the third is for MMSE regression
multi-task: ~



### This is for printing and testing frequency
print_freq: 1
valid_freq: 1
test_freq: 1

### This is for mask-autoencoder pretrain
### If there is no mask-autoencoder pretrain, please ignore this.
mask_ratio: 0.25

debug: False